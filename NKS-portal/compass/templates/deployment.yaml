apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-api
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicaCount.compassConfig }}
  selector:
    matchLabels:
      app: compass-api
  template:
    metadata:
      labels:
        app: compass-api
    spec:
      serviceAccountName: compass-controller
      initContainers:
      - name: mongodb-wait
        image: {{ .Values.global.repository }}/mongo:5.0.3
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          while true; do
            mongosh --host $MONGODB_SERVICE_SERVICE_HOST -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --eval "rs.status()"
            if [ $? == "0" ]; then
              exit 0
            fi
            echo "waiting for mongodb to start"
            sleep 5
          done
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: password
        - name: MONGODB_SERVICE_SERVICE_HOST
          value: "compass-configdb"
        - name: LOCAL_KEYCLOAK_URL
          value: https://{{ $.Values.global.keycloak_svc_url }}:8443
      containers:
      - name: api
        image: {{ $.Values.global.repository }}/{{ $.Values.global.images.compassApi }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8090
          name: grpc
          protocol: TCP
        env:
        - name: MONGO_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: username
        - name: MONGO_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: password
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              name: keycloak-admin
              key: username
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keycloak-admin
              key: password
        - name: LOCAL_KEYCLOAK_URL
          value: https://{{ $.Values.global.keycloak_svc_url }}:8443
        volumeMounts:
        - name: api-config-vol
          mountPath: /opt/config.yml
          subPath: config.yml
        - name: api-config-secret-vol
          mountPath: /opt/keycloak.yml
          subPath: keycloak.yml
        - name: controller-certs-vol
          mountPath: /opt/certs
        - name: trivy-config-vol
          mountPath: /opt/trivy.yml
          subPath: trivy.yml
        - name: gateway-config-vol
          mountPath: /opt/gateway.yml
          subPath: config.yml
        - name: frontend-certs-vol
          readOnly: true
          mountPath: /etc/frontend/certs
      imagePullSecrets:
      - name: {{ .Release.Name }}-docker-registry-key
      dnsPolicy: ClusterFirst
      volumes:
      - name: controller-certs-vol
        secret:
          secretName: controller-certs
      - name: api-config-secret-vol
        secret:
          secretName: api-config-secret
      - name: api-config-vol
        configMap:
          name: api-config
      - name: trivy-config-vol
        configMap:
          name: trivy-config
      - name: gateway-config-vol
        configMap:
          name: gateway-config
{{- if .Values.global.kubectl.tokenAccess.enabled }}
      - name: frontend-certs-vol
        secret:
          {{- if .Values.global.frontend.certs.external }}
          secretName: {{ .Values.global.frontend.certs.external }}
          {{- else }}
          secretName: frontend-certs
          {{- end }}
{{- end }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-controller
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicaCount.compassController }}
  selector:
    matchLabels:
      app: compass-controller
  template:
    metadata:
      labels:
        app: compass-controller
    spec:
      serviceAccountName: compass-controller
      initContainers:
      - name: mongodb-wait
        image: {{ .Values.global.repository }}/mongo:5.0.3
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          while true; do
            mongosh --host $MONGODB_SERVICE_SERVICE_HOST -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --eval "rs.status()"
            if [ $? == "0" ]; then
              exit 0
            fi
            echo "waiting for mongodb to start"
            sleep 5
          done
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: password
        - name: MONGODB_SERVICE_SERVICE_HOST
          value: "compass-configdb"
      containers:
      - name: controller
        image: {{ .Values.global.repository }}/{{ .Values.global.images.compassController }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8030
          name: http
          protocol: TCP
          hostPort: 8030
        - containerPort: 8040
          name: grpc
          protocol: TCP
          hostPort: 8040
        env:
        - name: MONGO_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: username
        - name: MONGO_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: password
        volumeMounts:
        - name: controller-certs-vol
          mountPath: /opt/certs
        - name: ingress-certs-vol
          mountPath: /opt/certs/ingress
        - name: controller-config-vol
          mountPath: /opt/
      imagePullSecrets:
      - name: {{ .Release.Name }}-docker-registry-key
      dnsPolicy: ClusterFirst
      volumes:
      - name: ingress-certs-vol
        secret:
          secretName: ingress-certs
      - name: controller-certs-vol
        secret:
          secretName: controller-certs
      - name: controller-config-vol
        configMap:
          name: controller-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-term
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicaCount.compassTerminal }}
  selector:
    matchLabels:
      app: compass-term
  template:
    metadata:
      labels:
        app: compass-term
    spec:
      serviceAccountName: compass-controller
      initContainers:
      - name: mongodb-wait
        image: {{ .Values.global.repository }}/mongo:5.0.3
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          while true; do
            mongosh --host $MONGODB_SERVICE_SERVICE_HOST -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --eval "rs.status()"
            if [ $? == "0" ]; then
              exit 0
            fi
            echo "waiting for mongodb to start"
            sleep 5
          done
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: password
        - name: MONGODB_SERVICE_SERVICE_HOST
          value: "compass-configdb"
      containers:
      - name: terminal
        image: {{ $.Values.global.repository }}/{{ $.Values.global.images.compassTerm }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: websocket
          protocol: TCP
        env:
        - name: MONGO_DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: username
        - name: MONGO_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: password
        volumeMounts:
        - name: terminal-config-vol
          mountPath: /opt/
        - name: ingress-certs-vol
          mountPath: /opt/certs/ingress
      imagePullSecrets:
      - name: {{ .Release.Name }}-docker-registry-key
      dnsPolicy: ClusterFirst
      volumes:
      - name: ingress-certs-vol
        secret:
          secretName: ingress-certs
      - name: terminal-config-vol
        configMap:
          name: terminal-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-orchestrator
  namespace: {{ .Release.Namespace }}
spec:
  # currently we only support 1 replica
  replicas: 1
  selector:
    matchLabels:
      app: compass-orchestrator
  template:
    metadata:
      labels:
        app: compass-orchestrator
    spec:
      serviceAccountName: compass-controller
      initContainers:
      - name: mongodb-wait
        image: {{ .Values.global.repository }}/mongo:5.0.3
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          while true; do
            mongosh --host $MONGODB_SERVICE_SERVICE_HOST -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --eval "rs.status()"
            if [ $? == "0" ]; then
              exit 0
            fi
            echo "waiting for mongodb to start"
            sleep 5
          done
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: password
        - name: MONGODB_SERVICE_SERVICE_HOST
          value: "compass-configdb"
      containers:
      - name: orchestrator
        image: {{ .Values.global.repository }}/{{ .Values.global.images.compassOrchestrator }}
        imagePullPolicy: IfNotPresent
        env:
        - name: MONGO_DB_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: configdb-secret
        - name: MONGO_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: configdb-secret
        volumeMounts:
        - mountPath: /opt/
          name: orchestrator-config-vol
        - mountPath: /opt/certs/ingress
          name: ingress-certs-vol
      imagePullSecrets:
      - name: {{ .Release.Name }}-docker-registry-key
      dnsPolicy: ClusterFirst
      volumes:
      - name: ingress-certs-vol
        secret:
          secretName: ingress-certs
      - name: orchestrator-config-vol
        configMap:
          name: orchestrator-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-metric-server
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: compass-metric-server
  template:
    metadata:
      labels:
        app: compass-metric-server
    spec:
      serviceAccountName: compass-controller
      initContainers:
      - name: mongodb-wait
        image: {{ .Values.global.repository }}/mongo:5.0.3
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          while true; do
            mongosh --host $MONGODB_SERVICE_SERVICE_HOST -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --eval "rs.status()"
            if [ $? == "0" ]; then
              exit 0
            fi
            echo "waiting for mongodb to start"
            sleep 5
          done
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: password
        - name: MONGODB_SERVICE_SERVICE_HOST
          value: "compass-configdb"
      - name: metricsdb-wait
        image: {{ .Values.global.repository }}/mongo:5.0.3
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          while true; do
            mongosh --host $MONGODB_SERVICE_SERVICE_HOST -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --eval "rs.status()"
            if [ $? == "0" ]; then
              exit 0
            fi
            echo "waiting for mongodb to start"
            sleep 5
          done
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: password
        - name: MONGODB_SERVICE_SERVICE_HOST
          value: "compass-metricsdb"
      containers:
      - name: metric-server
        image: {{ .Values.global.repository }}/{{ .Values.global.images.compassMetricServer }}
        imagePullPolicy: IfNotPresent
        env:
        - name: MONGO_DB_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: configdb-secret
        - name: MONGO_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: configdb-secret
        volumeMounts:
        - name: metric-server-config-vol
          mountPath: /opt/config.yml
          subPath: config.yml
      imagePullSecrets:
      - name: {{ .Release.Name }}-docker-registry-key
      dnsPolicy: ClusterFirst
      volumes:
      - name: metric-server-config-vol
        configMap:
          name: metric-server-config
{{- if .Values.trivy.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-image-scanner
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: compass-image-scanner
  template:
    metadata:
      labels:
        app: compass-image-scanner
    spec:
      serviceAccountName: compass-controller
      initContainers:
      - name: mongodb-wait
        image: {{ .Values.global.repository }}/mongo:5.0.3
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          while true; do
            mongosh --host $MONGODB_SERVICE_SERVICE_HOST -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --eval "rs.status()"
            if [ $? == "0" ]; then
              exit 0
            fi
            echo "waiting for mongodb to start"
            sleep 5
          done
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: configdb-secret
              key: password
        - name: MONGODB_SERVICE_SERVICE_HOST
          value: "compass-configdb"
      containers:
      - name: image-scanner
        image: {{ .Values.global.repository }}/compass-image-scanner:{{ include "helper.imageTag" . }}
        imagePullPolicy: IfNotPresent
        env:
        - name: MONGO_DB_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: configdb-secret
        - name: MONGO_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: configdb-secret
        volumeMounts:
        - name: image-scanner-config-vol
          mountPath: /opt/config.yml
          subPath: config.yml
        - name: trivy-config-vol
          mountPath: /opt/trivy.yml
          subPath: trivy.yml
      imagePullSecrets:
      - name: {{ .Release.Name }}-docker-registry-key
      dnsPolicy: ClusterFirst
      volumes:
      - name: image-scanner-config-vol
        configMap:
          name: image-scanner-config
      - name: trivy-config-vol
        configMap:
          name: trivy-config
{{- end }}
{{- if .Values.clusterManager.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compass-cluster-manager
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicaCount.clusterManager }}
  selector:
    matchLabels:
      app: compass-cluster-manager
  template:
    metadata:
      labels:
        app: compass-cluster-manager
    spec:
      serviceAccountName: compass-controller
      initContainers:
      - name: mongodb-wait
        image: library/mongo:5.0.3
        imagePullPolicy: IfNotPresent
        command:
        - /bin/bash
        - -c
        - |
          while true; do
            mongosh --host $MONGODB_SERVICE_SERVICE_HOST -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --eval "rs.status()"
            if [ $? == "0" ]; then
              exit 0
            fi
            echo "waiting for mongodb to start"
            sleep 5
          done
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: configdb-secret
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: configdb-secret
        - name: MONGODB_SERVICE_SERVICE_HOST
          value: compass-configdb
      containers:
      - name: cluster-manager
        image: {{ .Values.global.repository }}/compass-cluster-manager:{{ include "helper.imageTag" . }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: MONGO_DB_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: configdb-secret
        - name: MONGO_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: configdb-secret
        - name: KEYCLOAK_USER
          valueFrom:
            secretKeyRef:
              key: username
              name: keycloak-admin
        - name: KEYCLOAK_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: keycloak-admin
        volumeMounts:
        - mountPath: /opt/config.yml
          name: api-config-vol
          subPath: config.yml
        - mountPath: /opt/certs
          name: controller-certs-vol
      imagePullSecrets:
      - name: {{ .Release.Name }}-docker-registry-key
      volumes:
      - name: controller-certs-vol
        secret:
          defaultMode: 420
          secretName: controller-certs
      - configMap:
          defaultMode: 420
          name: api-config
        name: api-config-vol
{{- end }}
